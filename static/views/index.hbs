<!DOCTYPE html>
  <head>
    <meta charset="utf-8" />
    <title>같이하실Log</title>
    <style>
      body {
        background-color: #131F28
      }
      h1 {
        color: red;
        padding: 60px;
      }

      .container {
        margin-bottom: 7px;
      }

      .innerElement {
        margin-right: 15px;
      }

      .defaultText {
        color: white;
      }

      .pink {
        color: #E94560;
      }

      .info {
        color: greenyellow;
      }

      .warn {
        color: orangered;
      }

      .error {
        color: red;
      }

      .responseLogger {
        color: #ABC9FF;
      }

      .gatewayLogger {
        color: orange;
      }

      .exceptionFilter {
        color: red;
      }

      .unknownLogger {
        color: aquamarine;
      }

    </style>
  </head>

  <body>
    <form>
      <label for="passcode" class="defaultText">비밀번호</label>
      <input type="number" id="passcode">
      <button type="button" id="queryToday">오늘 로그 조회</button>

      <input type="checkbox" id="onlyResponseLog">
      <label for="onlyResponseLog" class="defaultText">리스폰스 로그만 보기</label>

      <input type="checkbox" id="showMetadataObj" checked>
      <label for="showMetadataObj" class="defaultText">오브젝트 보이기</label>
    </form>
    <div id="log-container"></div>

    <script>
      class LogRepository {
        _container = []
        _pushCallback;
        _removeCallback;
        _ttl;
        _expiresAt;
        constructor(pushCallback, removeCallback, ttlMilli) {
          this._pushCallback = pushCallback;
          this._removeCallback = removeCallback;
          this._ttl = ttlMilli
        }
        push(e) {
          this._container.push(e)
          this._pushCallback(e)
          this._expiresAt = Date.now() + this._ttl;
        }
        getAll() {
          return this._container;
        }
        hasLogs() {
          return this._container && Date.now() < this._expiresAt;
        }
      }

      const container = document.getElementById('log-container');
      document.getElementById('queryToday').addEventListener('click', async () => {

        if (logRepository.hasLogs()) {
          console.log("캐시된 로그 목록 재사용")
          return;
        }

        const passcode = document.getElementById('passcode').value

        const response = await fetch('/stream', {
          method: 'GET',
          headers: {
            'Authorization': 'Bearer ' + passcode
          }
        })

        if (!response.ok) {
          console.log(response)
          alert("잘못된 PASSCODE 입니다.")
          return;
        }

        container.replaceChildren()

        const reader = response.body.getReader();
        for await (let line of makeTextFileLineIterator(reader)) {
          logRepository.push(JSON.parse(line))
        }
      });

      const filterOnlyResponseLog = (l) => l.context === 'ResponseLogger'
      const filterShowAllLog = () => true;

      const showAllMetadataResolver = (val) => JSON.stringify(val)
      const hideMetadataResolver = (val) => val;

      const checkOnlyResponseLog = document.getElementById('onlyResponseLog')
      const checkShowMetadata = document.getElementById('showMetadataObj')

      let selectedFilter;
      let selectedMetadataResolver;

      function updateOnlyResponseLogChecked() {
        selectedFilter = checkOnlyResponseLog.checked ?
          filterOnlyResponseLog :
          filterShowAllLog;
      }

      function updateShowMetadataChecked() {
        selectedMetadataResolver = checkShowMetadata.checked ?
          showAllMetadataResolver :
          hideMetadataResolver;
      }

      updateOnlyResponseLogChecked();
      updateShowMetadataChecked();

      const logRepository = new LogRepository((e) => {
        if (!selectedFilter(e)) {
          return;
        }
        container.appendChild(getElement(e));
      }, () => {}, 7000)

      checkOnlyResponseLog.addEventListener('click', (e) => {
        updateOnlyResponseLogChecked()
        refreshAllLogs()
      })

      checkShowMetadata.addEventListener('click', (e) => {
        updateShowMetadataChecked()
        refreshAllLogs()
      })

      function refreshAllLogs() {
        container.replaceChildren()
        logRepository.getAll()
          .filter(selectedFilter)
          .forEach(resLog => container.appendChild(getElement(resLog))
          )
      }

      async function* makeTextFileLineIterator(reader) {
        const utf8Decoder = new TextDecoder('utf-8');
        let { value: chunk, done: readerDone } = await reader.read();
        chunk = chunk ? utf8Decoder.decode(chunk) : '';

        const re = /\n|\r|\r\n/gm;
        let startIndex = 0;
        let result;

        for (;;) {
          let result = re.exec(chunk);
          if (!result) {
            if (readerDone) {
              break;
            }
            let remainder = chunk.substr(startIndex);
            ({ value: chunk, done: readerDone } = await reader.read());
            chunk = remainder + (chunk ? utf8Decoder.decode(chunk) : '');
            startIndex = re.lastIndex = 0;
            continue;
          }
          yield chunk.substring(startIndex, result.index);
          startIndex = re.lastIndex;
        }
        if (startIndex < chunk.length) {
          // 마지막 줄이 개행 문자로 끝나지 않았을 때
          yield chunk.substr(startIndex);
        }
      }

      function getElement(line) {
        function setHoverEvent(container) {
          // This handler will be executed every time the cursor
          // is moved over a different list item
          container.addEventListener("mouseover", (event) => {
            // highlight the mouseover target
            event.target.style.color = "#C6EDFF";
          }, false);

          container.addEventListener("mouseout", (event) => {
            // highlight the mouseover target
            event.target.style.color = "";
          }, false);
        }

        function resolveLoggerType(type) {
          const isGateway = /.*Gateway/
          if (isGateway.test(type)) {
            return 'gatewayLogger'
          } else if (line.context === 'AllExceptionsFilter') {
            return 'exceptionFilter'
          } else if (line.context === 'ResponseLogger') {
            return 'responseLogger'
          } else {
            return 'unknownLogger'
          }
        }

        function createInnerElement(content, cls) {
          const innerElement = document.createElement('span');
          innerElement.append(content);
          innerElement.setAttribute('class', cls)
          return innerElement
        }

        const elementOrder = {
          timestamp: 0,
          context: 1,
          level: 2,
          message: 3,
          metadata: 4
        }

        const colorTheme = {
          timestamp: (val) => 'defaultText',
          context: resolveLoggerType,
          level: (val) => val,
          message: (val) => 'pink',
          metadata: (val) => 'defaultText'
        }

        const contentsResolver = {
          timestamp: (val) => val,
          context: (val) => val,
          level: (val) => val,
          message: (val) => val,
          metadata: selectedMetadataResolver
        }

        const lineContainer = document.createElement('div')
        lineContainer.setAttribute('class', 'container')

        Object.getOwnPropertyNames(line)
          .sort((a, b) =>  elementOrder[a] > elementOrder[b] ? 1 : -1)
          .forEach(p => {
            const clsAttr = `${colorTheme[p](line[p])} innerElement`
            const content = contentsResolver[p](line[p])
            lineContainer.appendChild(createInnerElement(content, clsAttr))
          })

        setHoverEvent(lineContainer)
        return lineContainer
      }
    </script>
  </body>
</html>